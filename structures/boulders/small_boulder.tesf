num randPrecision = 100;
num radius = 1+randomInt(randPrecision)/randPrecision*2;
num warp = 2;
num warpFreq = 2.5;
num squish = 1+randomInt(randPrecision)/randPrecision/2;
num radiusSquared = pow(radius,2);
num yTranslate = -1;

if (check(radius, -radius/squish, 0) != "LAND" ||
    check(-radius, -radius/squish, 0) != "LAND" ||
    check(0, -radius/squish, radius) != "LAND" ||
    check(0, -radius/squish, -radius) != "LAND"
    ) fail;

for (num x = -radius-warp; x < radius+warp; x = x + 1) {
    for (num y = (-radius-warp)/squish; y < (radius+warp)/squish; y = y + 1) {
        for (num z = -radius-warp; z < radius+warp; z = z + 1) {
            num warpX = warp * sampler("simplex3",
                                warpFreq*(x+originX()),
                                warpFreq*(y+originY()+1000),
                                warpFreq*(z+originZ()));
            num warpY = warp * sampler("simplex3",
                                warpFreq*(x+originX()),
                                warpFreq*(y+originY()+2000),
                                warpFreq*(z+originZ()));
            num warpZ = warp * sampler("simplex3",
                                warpFreq*(x+originX()),
                                warpFreq*(y+originY()+3000),
                                warpFreq*(z+originZ()));
			num distanceSquared = pow(x+warpX,2)+pow((y+warpY)*squish,2)+pow(z+warpZ,2);
            if (distanceSquared < radiusSquared) {
				structure(x, y+yTranslate, z, "boulder_palette", "NONE");
            }
        }
    }
}

//Credits to Astrash