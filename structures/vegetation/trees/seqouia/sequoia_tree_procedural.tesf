num randPrecision = 100;
num goldenAngle = 2.39996;
num pi = 3.14159;

num trunkHeight = 40+randomInt(10);
num trunkStartRadius = 2.5;
num trunkMidRadius = 1.5;
num trunkMidPoint = 0.1+randomInt(randPrecision)/randPrecision*0.2;
num trunkEndRadius = 1.1;
str trunkBlock = "minecraft:stripped_acacia_wood";

num sideBranchInterval = 1+randomInt(2);
num sideBranchMinHeight = trunkHeight*(0.3+randomInt(randPrecision)/randPrecision/3);
num sideBranchLength = (trunkHeight - sideBranchMinHeight)/(4+randomInt(2));
num sideBranchVerticalVariation = 0;
num sideBranchVerticalDirection = randomInt(randPrecision)/randPrecision-0.5;
num sideBranchLeafRadiusMin = 3;
num sideBranchLeafTranslate = 0;
num sideBranchLeafTopFlatness = 2;
num sideBranchLeafBottomFlatness = 2;
str sideBranchLeafBlock = "minecraft:mangrove_leaves[distance=1,persistent=false]";
str sideBranchBlockX = "minecraft:stripped_acacia_wood[axis=x]";
str sideBranchBlockY = "minecraft:stripped_acacia_wood[axis=y]";
str sideBranchBlockZ = "minecraft:stripped_acacia_wood[axis=z]";

num t = 0;
num currentRadius = trunkStartRadius;
num currentRadiusSquared = pow2(currentRadius);
num distanceSquared = 0;
num branchAngle = randomInt(randPrecision)/randPrecision*2*pi;
for (num i = -2; i < trunkHeight; i = i + 1) {
    if (i > sideBranchMinHeight) {
        if (i % sideBranchInterval == 0) {
            // Branch direction vector
            num dx = sin(branchAngle);
            num dy = sideBranchVerticalDirection + randomInt(randPrecision)/randPrecision*sideBranchVerticalVariation;
            num dz = cos(branchAngle);
            // Normalize vector
            num mag = sqrt(pow(dx,2)+pow(dy,2)+pow(dz,2));
            dx = dx/mag;
            dy = dy/mag;
            dz = dz/mag;
            // Branch origin
            num ox = 0;
            num oy = i;
            num oz = 0;
            // Set branch block based on largest unsigned vector component
            str branchBlock = sideBranchBlockY;
            if (abs(dx) > max(abs(dy),abs(dz))) branchBlock = sideBranchBlockX;
            else if (abs(dz) > max(abs(dy),abs(dx))) branchBlock = sideBranchBlockZ;
            num branchLength = -sideBranchLength*(i-trunkHeight)/(trunkHeight-sideBranchMinHeight);
            // Generate branch
            for (num l = 0; l <= branchLength; l = l + 1) {
                block(l*dx+ox, l*dy+oy, l*dz+oz, branchBlock);
            }
            // Rotate angle of next branch
            branchAngle = branchAngle + goldenAngle;
            // Generate leaf cluster at the end of the branch
            num radius = sideBranchLeafRadiusMin;
            num radiusSquared = pow(radius, 2);
            // Leaf cluster origin (end of branch)
            num lox = ox+branchLength*dx;
            num loy = oy+branchLength*dy + sideBranchLeafTranslate;
            num loz = oz+branchLength*dz;
            for (num cx = ceil(-radius); cx <= ceil(radius); cx = cx + 1) {
                for (num cy = ceil(-radius/sideBranchLeafBottomFlatness); cy <= ceil(radius/sideBranchLeafTopFlatness); cy = cy + 1) {
                    for (num cz = ceil(-radius); cz <= ceil(radius); cz = cz + 1) {
                        num squashFactor = sideBranchLeafBottomFlatness;
                        if (cy > 0) squashFactor = sideBranchLeafTopFlatness;
                        distanceSquared = pow(cx,2)+pow(cy*squashFactor,2)+pow(cz,2);
                        if (distanceSquared/radiusSquared < randomInt(randPrecision)/randPrecision) {
                            block(lox+cx, loy+cy, loz+cz, sideBranchLeafBlock, false);
                        }
                    }
                }
            }
        }
    }

    t = i/trunkHeight;
    if (t < trunkMidPoint) currentRadius = t*(-trunkStartRadius+trunkMidRadius)/trunkMidPoint+trunkStartRadius;
    else currentRadius = (t-trunkMidPoint)*(trunkEndRadius-trunkMidRadius)/(1-trunkMidPoint)+trunkMidRadius;
    currentRadiusSquared = pow2(currentRadius);
    for (num x = round(-currentRadius); x < round(currentRadius); x = x + 1) {
        for (num z = round(-currentRadius); z < round(currentRadius); z = z + 1) {
            distanceSquared = pow2(x)+pow2(z);
            if (distanceSquared < currentRadiusSquared) {
                block(x, i, z, trunkBlock, false);
            }
        }
    }
}

block(0, trunkHeight, 0, trunkBlock, false);
block(0, trunkHeight+1, 0, sideBranchLeafBlock, false);
block(1, trunkHeight+1, 0, sideBranchLeafBlock, false);
block(-1, trunkHeight+1, 0, sideBranchLeafBlock, false);
block(0, trunkHeight+1, 1, sideBranchLeafBlock, false);
block(0, trunkHeight+1, -1, sideBranchLeafBlock, false);
block(0, trunkHeight+2, 0, sideBranchLeafBlock, false);
block(0, trunkHeight+3, 0, sideBranchLeafBlock, false);
