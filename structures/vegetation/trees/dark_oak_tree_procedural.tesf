// Free to modify variables
num leafRadius = 3 + randomInt(4);
num trunkHeight = 5 + randomInt(5);
num leafTopHeight = trunkHeight * 1.3;
num leafBottomHeight = 1 + randomInt(2);
str trunkBlockX = "minecraft:dark_oak_log[axis=x]";
str trunkBlockY = "minecraft:dark_oak_log[axis=y]";
str trunkBlockZ = "minecraft:dark_oak_log[axis=z]";
str leafBlock   = "minecraft:dark_oak_leaves[distance=1,persistent=false]";

// Tree gen logic
num leafMidPointRatio = 0.3;
num leafMidHeight = leafBottomHeight + (leafTopHeight-leafBottomHeight) * leafMidPointRatio;
for (num y = 0; y <= leafTopHeight; y = y + 1) {
    num radius = 0;

    // Radius formula - Two parabolas that intersect at the variables above
    if (y < leafMidHeight) {
        radius = (-pow((y-leafMidHeight)/(leafBottomHeight-leafMidHeight),2)+1)*leafRadius;
    } else {
        radius = (-pow((y-leafMidHeight)/(leafTopHeight-leafMidHeight),2)+1)*leafRadius;
    }

    if (y >= leafBottomHeight) {
        if (radius <= 1) { // Skip generating circle if radius is less than 1
            block(0, y, 0, leafBlock);
        } else {
            // Generate circle of leaves at y level
            num squareradius = radius * radius; // Square the radius to avoid unnecessary square root when comparing dist
            for (num x = round(-radius); x <= round(radius); x = x + 1) {
                for (num z = round(-radius); z <= round(radius); z = z + 1) {
                    num squaredist = x*x+z*z;
                    if (squaredist <= squareradius) {
                        if (squareradius - squaredist < squareradius * 0.4) { // If close to edge, make fuzzy
                            if (randomInt(2) == 0) {
                                block(x, y, z, leafBlock, false);
                            }
                        } else {
                            block(x, y, z, leafBlock, false);
                        }
                    }
                }
            }
        }
    }

    if (y <= trunkHeight) {
        // Generating a tree branch
        if (radius > 4 && randomInt(2) == 0) {
            // Pick either X or Z axis
            num xdir = 1;
            num zdir = 0;
            str branchBlock = trunkBlockX;
            if (randomInt(2) == 1) {
                xdir = 0;
                zdir = 1;
                branchBlock = trunkBlockZ;
            }
            // Pick if negative of positive in axis
            num sign = 1;
            if (randomInt(2) == 0) sign = -1;
            // If there isn't already a branch directly below, generate a branch
            if (getMark(xdir*sign, y-1, zdir*sign) != "branch") {
               for(num i = 1; i < radius - 1.5; i = i + 1) {
                   // These generate in a straight line so it's not annoying to chop
                   block(i*xdir*sign, y, i*zdir*sign, branchBlock);
                   setMark(i*xdir*sign, y, i*zdir*sign, "branch");
               }
            }
        }
        block(0, y, 0, trunkBlockY); // Main trunk
    }
}
block(0, -1, 0, "minecraft:dirt");