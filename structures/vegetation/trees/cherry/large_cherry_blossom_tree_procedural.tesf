num randPrecision = 100;
num goldenAngle = 2.39996;
num pi = 3.14159;

num trunkHeight = 4 + randomInt(15);
str trunkBlock = "minecraft:cherry_log";
str rootBlockX = "minecraft:cherry_wood[axis=x]";
str rootBlockZ = "minecraft:cherry_wood[axis=z]";
str isReplaceable = "is_cherry_replaceable";

num sideBranchInterval = 3 + randomInt(2);
num sideBranchMinHeight = 2 + randomInt(3);
num sideBranchLengthMin = 4 + randomInt(2);
num sideBranchLengthVariation = 2;
num sideBranchVerticalVariation = 0;
num sideBranchVerticalDirection = 0.1 + randomInt(randPrecision) / randPrecision * 0.3;
num sideBranchLeafRadiusMin = 2.5;
num sideBranchLeafTranslate = 0;
num sideBranchLeafTopFlatness = 2;
num sideBranchLeafBottomFlatness = 3;
num sideBranchLeafDensity = 1;
str sideBranchLeafStructure = "cherry_leaves_clump";
str sideBranchBlockX = "minecraft:cherry_log[axis=x]";
str sideBranchBlockY = "minecraft:cherry_log[axis=y]";
str sideBranchBlockZ = "minecraft:cherry_log[axis=z]";

num topBranches = 17 + randomInt(5);
num topBranchLengthUpwardsMin = 9 + randomInt(2);
num topBranchLengthOutwardsMin = 4 + randomInt(6);
num topBranchLeafRadiusMin = 2.5;
num topBranchLeafTranslate = 0;
num topBranchLeafTopFlatness = 2;
num topBranchLeafBottomFlatness = 3;
num topBranchLeafDensity = 1;
str topBranchLeafStructure = "cherry_leaves_clump";
str topBranchBlockX = "minecraft:cherry_log[axis=x]";
str topBranchBlockY = "minecraft:cherry_log[axis=y]";
str topBranchBlockZ = "minecraft:cherry_log[axis=z]";

// Generate main trunk (including side branches)
num branchAngle = randomInt(randPrecision) / randPrecision * 2 * pi;
for (num i = 0; i < trunkHeight; i = i + 1) {
    if (!structure(0, i, 0, isReplaceable, "NONE")) {
        return;
    }

    if (i > sideBranchMinHeight && i % sideBranchInterval == 0) {
        // Determine if a side branch should generate on this layer
        // Branch direction vector
        num dx = sin(branchAngle);
        num dy = sideBranchVerticalDirection + randomInt(randPrecision) / randPrecision * sideBranchVerticalVariation;
        num dz = cos(branchAngle);
        // Normalize vector
        num mag = sqrt(pow(dx, 2) + pow(dy, 2) + pow(dz, 2));
        dx = dx / mag;
        dy = dy / mag;
        dz = dz / mag;
        // Branch origin
        num ox = 0;
        num oy = i;
        num oz = 0;
        // Set branch block based on largest unsigned vector component
        str branchBlock = sideBranchBlockY;
        if (abs(dx) > max(abs(dy), abs(dz))) branchBlock = sideBranchBlockX;
        else if (abs(dz) > max(abs(dy), abs(dx))) branchBlock = sideBranchBlockZ;
        num branchLength = sideBranchLengthMin + randomInt(randPrecision) / randPrecision * sideBranchLengthVariation;
        // Generate branch
        num bx = ox;
        num by = oy;
        num bz = by;
        bool branchCollided = false;
        for (num l = 0; l <= branchLength; l = l + 1) {
            bx = l * dx + ox;
            by = l * dy + oy;
            bz = l * dz + oz;
            // Determine if branch has collided with a block
            if (!structure(bx, by, bz, isReplaceable, "NONE")) {
                branchCollided = true;
                break;
            }
            block(bx, by, bz, branchBlock);
        }
        // Rotate angle of next branch
        branchAngle = branchAngle + goldenAngle;
        // Generate leaf cluster at the end of the branch
        if (!branchCollided) {
            num radius = sideBranchLeafRadiusMin;

            // Leaf cluster origin (end of branch)
            num lox = ox + branchLength * dx;
            num loy = oy + branchLength * dy + sideBranchLeafTranslate;
            num loz = oz + branchLength * dz;

            // Adjust radius to prevent clipping outside the collision mask
            num scanRadius = radius;
            num scanRadiusSquared = pow(scanRadius, 2);
            for (num cx = ceil(-scanRadius); cx <= ceil(scanRadius); cx = cx + 1) {
                for (num cy = ceil(-scanRadius / sideBranchLeafBottomFlatness); cy <= ceil(scanRadius / sideBranchLeafTopFlatness); cy = cy + 1) {
                    for (num cz = ceil(-scanRadius); cz <= ceil(scanRadius); cz = cz + 1) {
                        num squashFactor = sideBranchLeafBottomFlatness;
                        if (cy > 0) squashFactor = sideBranchLeafTopFlatness;
                        num distanceSquared = pow(cx, 2) + pow(cy * squashFactor, 2) + pow(cz, 2);
                        if (distanceSquared < scanRadiusSquared) {
                            if (!structure(lox + cx, loy + cy, loz + cz, isReplaceable, "NONE")) {
                                radius = min(radius, sqrt(distanceSquared));
                            }
                        }
                    }
                }
            }

            // Place leaf cluster
            block(lox, loy, loz, branchBlock);
            num radiusSquared = pow(radius, 2);
            for (num cx = ceil(-radius); cx <= ceil(radius); cx = cx + 1) {
                for (num cy = ceil(-radius / sideBranchLeafBottomFlatness); cy <= ceil(radius / sideBranchLeafTopFlatness); cy = cy + 1) {
                    for (num cz = ceil(-radius); cz <= ceil(radius); cz = cz + 1) {
                        num squashFactor = sideBranchLeafBottomFlatness;
                        if (cy > 0) squashFactor = sideBranchLeafTopFlatness;
                        num distanceSquared = pow(cx, 2) + pow(cy * squashFactor, 2) + pow(cz, 2);
                        if (distanceSquared < radiusSquared && randomInt(randPrecision) / randPrecision < sideBranchLeafDensity) {
                            structure(lox + cx, loy + cy, loz + cz, sideBranchLeafStructure, "NONE", "CW_90", "CCW_90", "CW_180");
                        }
                    }
                }
            }
        }
    }
    block(0, i, 0, trunkBlock);
    block(1, i, 0, trunkBlock);
    block(0, i, 1, trunkBlock);
    block(1, i, 1, trunkBlock);
}

// Generate roots at base of trunk
num roots = 3;
num rootMaxDepth = 3;
num rootHeight = 3;
num rootLength = 4;
num rootAngle = randomInt(randPrecision) / randPrecision * 2 * pi;
for (num r = 0; r < roots; r = r + 1) {
    num dx = sin(rootAngle);
    num dz = cos(rootAngle);
    str rootBlock = rootBlockX;
    if (abs(dz) > abs(dx)) rootBlock = rootBlockZ;
    for (num l = 0; l <= rootLength; l = l + 1) {
        num height = rootHeight * (1 - (l / rootLength));
        bool bottomedOut = false;
        for (num h = height; h >= -rootMaxDepth; h = h - 1) {
            if (check(round(l * dx), round(h), round(l * dz)) != "AIR") {
                bottomedOut = true;
                break;
            }
            block(l * dx, h, l * dz, rootBlock);
        }
        if (!bottomedOut) break;
    }
    rootAngle = rootAngle + goldenAngle;
}

for (num b = 1; b <= topBranches; b = b + 1) {
    num t = b / topBranches;
    num ti = 1 - t;
    // Branch direction vector
    num dx = sin(branchAngle) * ti;
    num dy = t;
    num dz = cos(branchAngle) * ti;
    // Normalize vector
    num mag = sqrt(pow(dx, 2) + pow(dy, 2) + pow(dz, 2));
    dx = dx / mag;
    dy = dy / mag;
    dz = dz / mag;
    // Branch origin
    num ox = 0;
    num oy = trunkHeight;
    num oz = 0;
    // Set branch block based on largest unsigned vector component
    str branchBlock = topBranchBlockY;
    if (abs(dx) > max(abs(dy), abs(dz))) branchBlock = topBranchBlockX;
    else if (abs(dz) > max(abs(dy), abs(dx))) branchBlock = topBranchBlockZ;
    num branchLength = topBranchLengthUpwardsMin * ti + topBranchLengthOutwardsMin * t;
    // Generate branch
    num bx = ox;
    num by = oy;
    num bz = by;
    bool branchCollided = false;
    for (num l = 0; l <= branchLength; l = l + 1) {
        bx = l * dx + ox;
        by = l * dy + oy;
        bz = l * dz + oz;
        // Determine if branch has collided with a block
        if (!structure(bx, by, bz, isReplaceable, "NONE")) {
            branchCollided = true;
            break;
        }
        block(bx, by, bz, branchBlock);
    }
    // Rotate angle of next branch
    branchAngle = branchAngle + goldenAngle;
    // Generate leaf cluster at the end of the branch
    if (!branchCollided) {
        num radius = topBranchLeafRadiusMin;

        // Leaf cluster origin (end of branch)
        num lox = ox + branchLength * dx;
        num loy = oy + branchLength * dy + topBranchLeafTranslate;
        num loz = oz + branchLength * dz;

        // Adjust radius to prevent clipping outside the collision mask
        num scanRadius = radius;
        num scanRadiusSquared = pow(scanRadius, 2);
        for (num cx = ceil(-scanRadius); cx <= ceil(scanRadius); cx = cx + 1) {
            for (num cy = ceil(-scanRadius / topBranchLeafBottomFlatness); cy <= ceil(scanRadius / topBranchLeafTopFlatness); cy = cy + 1) {
                for (num cz = ceil(-scanRadius); cz <= ceil(scanRadius); cz = cz + 1) {
                    num squashFactor = topBranchLeafBottomFlatness;
                    if (cy > 0) squashFactor = topBranchLeafTopFlatness;
                    num distanceSquared = pow(cx, 2) + pow(cy * squashFactor, 2) + pow(cz, 2);
                    if (distanceSquared < scanRadiusSquared) {
                        if (!structure(lox + cx, loy + cy, loz + cz, isReplaceable, "NONE")) {
                            radius = min(radius, sqrt(distanceSquared));
                        }
                    }
                }
            }
        }

        // Place leaf cluster
        block(lox, loy, loz, branchBlock);
        num radiusSquared = pow(radius, 2);
        for (num cx = ceil(-radius); cx <= ceil(radius); cx = cx + 1) {
            for (num cy = ceil(-radius / topBranchLeafBottomFlatness); cy <= ceil(radius / topBranchLeafTopFlatness); cy = cy + 1) {
                for (num cz = ceil(-radius); cz <= ceil(radius); cz = cz + 1) {
                    num squashFactor = topBranchLeafBottomFlatness;
                    if (cy > 0) squashFactor = topBranchLeafTopFlatness;
                    num distanceSquared = pow(cx, 2) + pow(cy * squashFactor, 2) + pow(cz, 2);
                    if (distanceSquared < radiusSquared && randomInt(randPrecision) / randPrecision < topBranchLeafDensity) {
                        structure(lox + cx, loy + cy, loz + cz, topBranchLeafStructure, "NONE", "CW_90", "CCW_90", "CW_180");
                    }
                }
            }
        }
    }
}

block(0, -1, 0, "minecraft:dirt");