num randPrecision = 100;
num goldenAngle = 2.39996;
num pi = 3.14159;

num trunkHeight = 45+randomInt(25);
str trunkBlock = "minecraft:pale_oak_log";
str altTrunkBlock = "minecraft:pale_oak_log";
num trunkWidth = 1;
str rootBlockX = trunkBlock;
str rootBlockZ = trunkBlock;
str altRootBlock = altTrunkBlock;

num sideBranchAmount = 15;
num sideBranchInterval = 12;
num sideBranchMinHeight = 5;
num sideBranchLengthMin = 14;
num sideBranchLengthVariation = 3;
num sideBranchVerticalVariation = 1;
num sideBranchVerticalDirection = (0.2+randomInt(randPrecision)/randPrecision);
num sideBranchLeafRadiusMin = 3.5;
num sideBranchLeafTranslate = 0;
num sideBranchLeafTopFlatness = 1;
num sideBranchLeafBottomFlatness = 3;
num sideBranchLeafDensity = 0.6;

str sideBranchLeafStructure = "birch_leaves_clump";
str sideBranchBlockX = trunkBlock;
str sideBranchBlockY = trunkBlock;
str sideBranchBlockZ = trunkBlock;
str altSideBranchBlock = altTrunkBlock;

num topBranches = 3+randomInt(2);
num topBranchLengthUpwardsMin = 1+randomInt(4);
num topBranchLengthOutwardsMin = 2+randomInt(3);
num topBranchVerticalDirection = 1;
num topBranchLeafRadiusMin = 3.5;
num topBranchLeafTranslate = 0;
num topBranchLeafTopFlatness = 2;
num topBranchLeafBottomFlatness = 3;
num topBranchLeafDensity = 0.4;
str topBranchLeafStructure = "birch_leaves_clump";
str topBranchBlockX = trunkBlock;
str topBranchBlockY = trunkBlock;
str topBranchBlockZ = trunkBlock;
str altTopBranchBlock = altTrunkBlock;

// Generate roots at base of trunk
num roots = 3;
num rootMaxDepth = 3;
num rootHeight = 3;
num rootLength = 4;
num rootAngle = randomInt(randPrecision)/randPrecision*2*pi;
for (num r = 0; r < roots; r = r + 1) {
    num dx = sin(rootAngle);
    num dz = cos(rootAngle);
    str rootBlock = rootBlockX;
    if (abs(dz) > abs(dx)) rootBlock = rootBlockZ;
    for (num l = 0; l <= (rootLength+randomInt(3)); l = l + 1) {
        num height = (rootHeight+randomInt(3)) * (1-(l/rootLength));
        bool bottomedOut = false;
        str placeRootBlock = rootBlock;
        for (num h = height; h >= -rootMaxDepth; h = h - 1) {
            if (check(round(l*dx),round(h),round(l*dz)) != "AIR") {
                bottomedOut = true;
                break;
            }
                placeRootBlock = rootBlock;
                if (randomInt(2) == 0) placeRootBlock = altRootBlock;
                block(l*dx, h, l*dz, placeRootBlock);
        }
        if (!bottomedOut) break;
    }
    rootAngle = rootAngle + goldenAngle;
}

num branchAngle = randomInt(randPrecision)/randPrecision*2*pi;
for (num i = 0; i < trunkHeight; i = i + 1) {
    sideBranchLengthMin = sideBranchLengthMin-0.25;
    if (trunkHeight == trunkHeight/2) sideBranchLeafRadiusMin = sideBranchLeafRadiusMin/3;
    for (num s = 0; s < sideBranchAmount; s = s + 1) {
        if (i > sideBranchMinHeight) {
            if (i % sideBranchInterval == 0) {
                // Branch direction vector
                num dx = sin(branchAngle);
                num dy = sideBranchVerticalDirection + randomInt(randPrecision)/randPrecision*sideBranchVerticalVariation;
                num dz = cos(branchAngle);
                // Normalize vector
                num mag = sqrt(pow(dx,2)+pow(dy,2)+pow(dz,2));
                dx = dx/mag;
                dy = dy/mag;
                dz = dz/mag;
                // Branch origin
                num ox = 0;
                num oy = i;
                num oz = 0;
                // Set branch block based on largest unsigned vector component
                str branchBlock = sideBranchBlockY;
                if (abs(dx) > max(abs(dy),abs(dz))) branchBlock = sideBranchBlockX;
                else if (abs(dz) > max(abs(dy),abs(dx))) branchBlock = sideBranchBlockZ;
                num branchLength = sideBranchLengthMin + randomInt(randPrecision)/randPrecision*sideBranchLengthVariation;
                // Generate branch
                str placeBranchBlock = branchBlock;
                for (num l = 0; l <= branchLength; l = l + 1) {
                    placeBranchBlock = branchBlock;
                    if (randomInt(2) == 0) placeBranchBlock = altSideBranchBlock;
                    block(l*dx+ox, l*dy+oy, l*dz+oz, placeBranchBlock);
                }
                // Rotate angle of next branch
                branchAngle = branchAngle + goldenAngle;
                // Generate leaf cluster at the end of the branch
                num radius = sideBranchLeafRadiusMin;
                num radiusSquared = pow(radius, 2);
                // Leaf cluster origin (end of branch)
                num lox = ox+branchLength*dx;
                num loy = oy+branchLength*dy + sideBranchLeafTranslate;
                num loz = oz+branchLength*dz;
                for (num cx = ceil(-radius); cx <= ceil(radius); cx = cx + 1) {
                    for (num cy = ceil(-radius/sideBranchLeafBottomFlatness); cy <= ceil(radius/sideBranchLeafTopFlatness); cy = cy + 1) {
                        for (num cz = ceil(-radius); cz <= ceil(radius); cz = cz + 1) {
                            num squashFactor = sideBranchLeafBottomFlatness;
                            if (cy > 0) squashFactor = sideBranchLeafTopFlatness;
                            num distanceSquared = pow(cx,2)+pow(cy*squashFactor,2)+pow(cz,2);
                            if (distanceSquared < radiusSquared && randomInt(randPrecision)/randPrecision < sideBranchLeafDensity) {
                                structure(lox+cx, loy+cy, loz+cz, sideBranchLeafStructure, "NONE", "CW_90", "CCW_90", "CW_180");
                            }
                        }
                    }
                }
            }
        }
    }
    str placeTrunkBlock = trunkBlock;
    for (num x = 0; x < trunkWidth; x = x + 1) {
        for (num z = 0; z < trunkWidth; z = z + 1) {
            placeTrunkBlock = trunkBlock;
            if (randomInt(2) == 0) placeTrunkBlock = altTrunkBlock;
            block(x, i, z, placeTrunkBlock);
        }
    }
}

for (num b = 1; b <= topBranches; b = b + 1) {
    num t = b/topBranches;
    num ti = 1-t;
    // Branch direction vector
    num dx = sin(branchAngle) * t;
    num dy = topBranchVerticalDirection;
    num dz = cos(branchAngle) * t;
    // Normalize vector
    num mag = sqrt(pow(dx,2)+pow(dy,2)+pow(dz,2));
    dx = dx/mag;
    dy = dy/mag;
    dz = dz/mag;
    // Branch origin
    num ox = 0;
    num oy = trunkHeight;
    num oz = 0;
    // Set branch block based on largest unsigned vector component
    str branchBlock = topBranchBlockY;
    if (abs(dx) > max(abs(dy),abs(dz))) branchBlock = topBranchBlockX;
    else if (abs(dz) > max(abs(dy),abs(dx))) branchBlock = topBranchBlockZ;
    num branchLength = topBranchLengthUpwardsMin*ti + topBranchLengthOutwardsMin*t;
    // Generate top branch
    str placeBranchBlock = branchBlock;
    for (num l = 0; l <= branchLength; l = l + 1) {
        placeBranchBlock = branchBlock;
        if (randomInt(2) == 0) placeBranchBlock = altTopBranchBlock;
        block(l*dx+ox, l*dy+oy, l*dz+oz, placeBranchBlock);
    }
    // Rotate angle of next branch
    branchAngle = branchAngle + goldenAngle;
    // Generate leaf cluster at the end of the branch
    num radius = topBranchLeafRadiusMin;
    num radiusSquared = pow(radius, 2);
    // Leaf cluster origin (end of branch)
    num lox = ox+branchLength*dx;
    num loy = oy+branchLength*dy + topBranchLeafTranslate;
    num loz = oz+branchLength*dz;
    for (num cx = ceil(-radius); cx <= ceil(radius); cx = cx + 1) {
        for (num cy = ceil(-radius/topBranchLeafBottomFlatness); cy <= ceil(radius/topBranchLeafTopFlatness); cy = cy + 1) {
            for (num cz = ceil(-radius); cz <= ceil(radius); cz = cz + 1) {
                num squashFactor = topBranchLeafBottomFlatness;
                if (cy > 0) squashFactor = topBranchLeafTopFlatness;
                num distanceSquared = pow(cx,2)+pow(cy*squashFactor,2)+pow(cz,2);
                if (distanceSquared < radiusSquared && randomInt(randPrecision)/randPrecision < topBranchLeafDensity) {
                    structure(lox+cx, loy+cy, loz+cz, topBranchLeafStructure, "NONE", "CW_90", "CCW_90", "CW_180");
                }
            }
        }
    }
}

block(0, -1, 0, "minecraft:dirt");