num randPrecision = 100;
num goldenAngle = 2.39996;
num pi = 3.14159;

num trunkHeight = 35+randomInt(5);
num trunkRadius = 2;

str trunkBlock = "minecraft:pale_oak_log";

str rootBlock = "minecraft:pale_oak_wood";

num sideBranchOffset = -6;
num sideBranchAmountMin = 6;
num sideBranchAmountVariation = 3;
num sideBranchAmountInterval = -1;
num sideBranchLengthInterval = trunkHeight * 0.03;
num sideBranchLeafRadiusInterval = trunkHeight * 0.0085;

num sideBranchInterval = 5;
num sideBranchMinHeight = 3;
num sideBranchLengthMin = 8+randomInt(2);
num sideBranchLengthVariation = 3+randomInt(2);
num sideBranchVerticalVariation = 0;
num sideBranchVerticalDirection = 0.25+randomInt(randPrecision)/randPrecision/2;
num sideBranchLeafRadiusMin = 3.5;
num sideBranchLeafTranslate = -1;
num sideBranchLeafTopFlatness = 1;
num sideBranchLeafBottomFlatness = 2;
num sideBranchLeafDensity = 0.75;

str sideBranchLeafStructure = "birch_leaves_clump";
str sideBranchBlockX = "minecraft:pale_oak_wood[axis=x]";
str sideBranchBlockY = "minecraft:pale_oak_wood[axis=y]";
str sideBranchBlockZ = "minecraft:pale_oak_wood[axis=z]";

num topBranches = 3;
num topBranchLengthUpwardsMin = 1;
num topBranchLengthOutwardsMin = 1;
num topBranchVerticalDirection = 0;
num topBranchLeafRadiusMin = 2;
num topBranchLeafTranslate = -1;
num topBranchLeafTopFlatness = 1;
num topBranchLeafBottomFlatness = 2;
num topBranchLeafDensity = 0.75;
str topBranchLeafStructure = "birch_leaves_clump";

str topBranchBlockX = "minecraft:pale_oak_wood[axis=x]";
str topBranchBlockY = "minecraft:pale_oak_wood[axis=y]";
str topBranchBlockZ = "minecraft:pale_oak_wood[axis=z]";

// Generate roots at base of trunk
num roots = 4+randomInt(3);
num rootMaxDepth = 3;
num rootHeight = 6;
num rootLength = 4;
num rootAngle = randomInt(randPrecision)/randPrecision*2*pi;
for (num r = 0; r < roots; r = r + 1) {
    num dx = sin(rootAngle);
    num dz = cos(rootAngle);

    for (num l = 0; l <= (rootLength+randomInt(3)); l = l + 1) {
        num height = (rootHeight) * (1-(l/rootLength));
        bool bottomedOut = false;
        for (num h = height; h >= -rootMaxDepth; h = h - 1) {
            if (check(round(l*dx),round(h),round(l*dz)) != "AIR") {
                bottomedOut = true;
                break;
            }
            block(l*dx, h, l*dz, rootBlock);
        }
        if (!bottomedOut) break;
    }
    rootAngle = rootAngle + goldenAngle;
}

num branchAngle = randomInt(randPrecision)/randPrecision*2*pi;
for (num i = 0; i < trunkHeight; i = i + 1) {


    if (i > sideBranchMinHeight) {
        if ((i+sideBranchOffset) % sideBranchInterval == 0) {

            num sideBranches = sideBranchAmountMin+randomInt(sideBranchAmountVariation);

            if (sideBranchAmountVariation > 0) sideBranchAmountVariation = sideBranchAmountVariation - sideBranchAmountInterval;

            sideBranchLengthMin = sideBranchLengthMin - sideBranchLengthInterval;
            sideBranchLeafRadiusMin = sideBranchLeafRadiusMin - sideBranchLeafRadiusInterval;

            for (num s = 0; s < sideBranches; s = s + 1) {
                // Branch direction vector
                num dx = sin(branchAngle);
                num dy = sideBranchVerticalDirection + randomInt(randPrecision)/randPrecision*sideBranchVerticalVariation;
                num dz = cos(branchAngle);
                // Normalize vector
                num mag = sqrt(pow(dx,2)+pow(dy,2)+pow(dz,2));
                dx = dx/mag;
                dy = dy/mag;
                dz = dz/mag;
                // Branch origin
                num ox = 0;
                num oy = i;
                num oz = 0;
                // Set branch block based on largest unsigned vector component
                str branchBlock = sideBranchBlockY;
                if (abs(dx) > max(abs(dy),abs(dz))) branchBlock = sideBranchBlockX;
                else if (abs(dz) > max(abs(dy),abs(dx))) branchBlock = sideBranchBlockZ;
                num branchLength = sideBranchLengthMin + randomInt(randPrecision)/randPrecision*sideBranchLengthVariation;
                // Generate branch
                for (num l = 0; l <= branchLength; l = l + 1) {
                    block((l*dx)+ox, (l*dy)+oy, (l*dz)+oz, branchBlock);
                }
                // Rotate angle of next branch
                branchAngle = branchAngle + goldenAngle;
                // Generate leaf cluster at the end of the branch
                num radius = sideBranchLeafRadiusMin;
                num radiusSquared = pow(radius, 2);
                // Leaf cluster origin (end of branch)
                num lox = ox+branchLength*dx;
                num loy = oy+branchLength*dy + sideBranchLeafTranslate;
                num loz = oz+branchLength*dz;
                for (num cx = ceil(-radius); cx <= ceil(radius); cx = cx + 1) {
                    for (num cy = ceil(-radius/sideBranchLeafBottomFlatness); cy <= ceil(radius/sideBranchLeafTopFlatness); cy = cy + 1) {
                        for (num cz = ceil(-radius); cz <= ceil(radius); cz = cz + 1) {
                            num squashFactor = sideBranchLeafBottomFlatness;
                            if (cy > 0) squashFactor = sideBranchLeafTopFlatness;
                            num distanceSquared = pow(cx,2)+pow(cy*squashFactor,2)+pow(cz,2);
                            if (distanceSquared < radiusSquared && randomInt(randPrecision)/randPrecision < sideBranchLeafDensity) {
                                structure(lox+cx, loy+cy, loz+cz, sideBranchLeafStructure, "NONE", "CW_90", "CCW_90", "CW_180");
                            }
                        }
                    }
                }
            }
        }
    }

    for (num x = 0; x < trunkRadius; x = x + 1) {
        for (num z = 0; z < trunkRadius; z = z + 1) {
            if (pow(x,2)+pow(z,2) < pow(trunkRadius,2)) block(x, i, z, trunkBlock);
        }
    }
}

for (num b = 1; b <= topBranches; b = b + 1) {
    num t = b/topBranches;
    num ti = 1-t;
    // Branch direction vector
    num dx = sin(branchAngle) * t;
    num dy = topBranchVerticalDirection;
    num dz = cos(branchAngle) * t;
    // Normalize vector
    num mag = sqrt(pow(dx,2)+pow(dy,2)+pow(dz,2));
    dx = dx/mag;
    dy = dy/mag;
    dz = dz/mag;
    // Branch origin
    num ox = 0;
    num oy = trunkHeight;
    num oz = 0;
    // Set branch block based on largest unsigned vector component
    str branchBlock = topBranchBlockY;
    if (abs(dx) > max(abs(dy),abs(dz))) branchBlock = topBranchBlockX;
    else if (abs(dz) > max(abs(dy),abs(dx))) branchBlock = topBranchBlockZ;
    num branchLength = topBranchLengthUpwardsMin*ti + topBranchLengthOutwardsMin*t;
    // Generate top branch
    for (num l = 0; l <= branchLength; l = l + 1) {
        block(l*dx+ox, l*dy+oy, l*dz+oz, branchBlock);
    }
    // Rotate angle of next branch
    branchAngle = branchAngle + goldenAngle;
    // Generate leaf cluster at the end of the branch
    num radius = topBranchLeafRadiusMin;
    num radiusSquared = pow(radius, 2);
    // Leaf cluster origin (end of branch)
    num lox = ox+branchLength*dx;
    num loy = oy+branchLength*dy + topBranchLeafTranslate;
    num loz = oz+branchLength*dz;
    for (num cx = ceil(-radius); cx <= ceil(radius); cx = cx + 1) {
        for (num cy = ceil(-radius/topBranchLeafBottomFlatness); cy <= ceil(radius/topBranchLeafTopFlatness); cy = cy + 1) {
            for (num cz = ceil(-radius); cz <= ceil(radius); cz = cz + 1) {
                num squashFactor = topBranchLeafBottomFlatness;
                if (cy > 0) squashFactor = topBranchLeafTopFlatness;
                num distanceSquared = pow(cx,2)+pow(cy*squashFactor,2)+pow(cz,2);
                if (distanceSquared < radiusSquared && randomInt(randPrecision)/randPrecision < topBranchLeafDensity) {
                    structure(lox+cx, loy+cy, loz+cz, topBranchLeafStructure, "NONE", "CW_90", "CCW_90", "CW_180");
                }
            }
        }
    }
}

block(0, -1, 0, "minecraft:dirt");