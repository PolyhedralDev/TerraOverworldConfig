num randPrecision = 100;
num goldenAngle = 2.39996;
num pi = 3.14159;
num twopi = 6.28318530718;

num trunkHeight = 5;
str trunkBlock = "minecraft:mangrove_log";
str rootBlockX = "minecraft:mangrove_wood[axis=x]";
str rootBlockZ = "minecraft:mangrove_wood[axis=z]";

num sideBranchInterval = 0;
num sideBranchMinHeight = 2 + randomInt(3);
num sideBranchLengthMin = 3;
num sideBranchLengthVariation = 2;
num sideBranchVerticalVariation = 0;
num sideBranchVerticalDirection = 1 + randomInt(randPrecision) / randPrecision / 2;
num sideBranchLeafRadiusMin = 2;
num sideBranchLeafTranslate = 0;
num sideBranchLeafTopFlatness = 2;
num sideBranchLeafBottomFlatness = 4;
num sideBranchLeafDensity = 0.6;
str sideBranchLeafStructure = "blank";
str sideBranchBlockX = "minecraft:mangrove_wood[axis=x]";
str sideBranchBlockY = "minecraft:mangrove_wood[axis=y]";
str sideBranchBlockZ = "minecraft:mangrove_wood[axis=z]";

num topBranches = 5;
num topBranchRadius = 1.15;
num topBranchLengthUpwardsMin = 6;
num topBranchLengthOutwardsMin = 1;
num topBranchVerticalDirection = 0.8;
num topBranchLeafRadiusMin = 2;
num topBranchLeafTranslate = 0;
num topBranchLeafTopFlatness = 1.5;
num topBranchLeafBottomFlatness = 1;
num topBranchLeafDensity = 0.6;
str topBranchLeafStructure = "blank";
str topBranchBlockX = "minecraft:mangrove_wood[axis=x]";
str topBranchBlockY = "minecraft:mangrove_wood[axis=y]";
str topBranchBlockZ = "minecraft:mangrove_wood[axis=z]";

num endBranches = 5;
num endBranchLengthUpwardsMin = 6;
num endBranchLengthOutwardsMin = 4;
num endBranchVerticalDirection = 0.4;
num endBranchLeafRadiusMin = 2;
num endBranchLeafTranslate = 0;
num endBranchLeafTopFlatness = 1.5;
num endBranchLeafBottomFlatness = 1;
num endBranchLeafDensity = 0.6;
str endBranchLeafStructure = "blank";
str endBranchBlockX = "minecraft:mangrove_roots";
str endBranchBlockY = "minecraft:mangrove_roots";
str endBranchBlockZ = "minecraft:mangrove_roots";

num leafBranches = 5;
num leafBranchLengthUpwardsMin = 10;
num leafBranchLengthOutwardsMin = 0;
num leafBranchVerticalDirection = 2;
num leafBranchLeafRadiusMin = 1.5;
num leafBranchLeafTranslate = 0;
num leafBranchLeafTopFlatness = 1;
num leafBranchLeafBottomFlatness = 1;
num leafBranchLeafDensity = 1;
str leafBranchLeafStructure = "oak_leaves_clump";
str leafBranchBlockX = "minecraft:mangrove_roots";
str leafBranchBlockY = "minecraft:mangrove_roots";
str leafBranchBlockZ = "minecraft:mangrove_roots";

num maxBranchReachRadius = 15;

// Generate roots at base of trunk
num roots = 3;
num rootMaxDepth = 3;
num rootHeight = 4;
num rootLength = 4;
num rootAngle = randomInt(randPrecision) / randPrecision * 2 * pi;
for (num r = 0; r < roots; r = r + 1) {
    num rdx = sin(rootAngle);
    num rdz = cos(rootAngle);
    str rootBlock = rootBlockX;
    if (abs(rdz) > abs(rdx)) rootBlock = rootBlockZ;
    for (num l = 0; l <= rootLength; l = l + 1) {
        num height = rootHeight * (1 - (l / rootLength));
        bool bottomedOut = false;
        for (num h = height; h >= -rootMaxDepth; h = h - 1) {
            if (check(round(l * rdx), round(h), round(l * rdz)) != "AIR") {
                bottomedOut = true;
                break;
            }
            block(l * rdx, h, l * rdz, rootBlock);
        }
        if (!bottomedOut) break;
    }
    rootAngle = rootAngle + goldenAngle;
}

num branchAngle = randomInt(randPrecision) / randPrecision * 2 * pi;
for (num i = 0; i < trunkHeight; i = i + 1) {
    if (i > sideBranchMinHeight) {
        if (i % sideBranchInterval == 0) {
            // Branch direction vector
            num dx = sin(branchAngle);
            num dy = sideBranchVerticalDirection + randomInt(randPrecision) / randPrecision * sideBranchVerticalVariation;
            num dz = cos(branchAngle);
            // Normalize vector
            num mag = sqrt(pow(dx, 2) + pow(dy, 2) + pow(dz, 2));
            dx = dx / mag;
            dy = dy / mag;
            dz = dz / mag;
            // Branch origin
            num ox = 0;
            num oy = i;
            num oz = 0;
            // Set branch block based on largest unsigned vector component
            str branchBlock = sideBranchBlockY;
            if (abs(dx) > max(abs(dy), abs(dz))) branchBlock = sideBranchBlockX;
            else if (abs(dz) > max(abs(dy), abs(dx))) branchBlock = sideBranchBlockZ;
            num branchLength = sideBranchLengthMin + randomInt(randPrecision) / randPrecision * sideBranchLengthVariation;
            // Generate branch
            for (num l = 1; l <= branchLength; l = l + 1) {
                block(l * dx + ox, l * dy + oy, l * dz + oz, branchBlock);
            }
            // Rotate angle of next branch
            branchAngle = branchAngle + goldenAngle;
            // Generate leaf cluster at the end of the branch
            num radius = sideBranchLeafRadiusMin;
            num radiusSquared = pow(radius, 2);
            // Leaf cluster origin (end of branch)
            num lox = ox + branchLength * dx;
            num loy = oy + branchLength * dy + sideBranchLeafTranslate;
            num loz = oz + branchLength * dz;
            for (num cx = ceil(-radius); cx <= ceil(radius); cx = cx + 1) {
                for (num cy = ceil(-radius / sideBranchLeafBottomFlatness); cy <= ceil(radius / sideBranchLeafTopFlatness); cy = cy + 1) {
                    for (num cz = ceil(-radius); cz <= ceil(radius); cz = cz + 1) {
                        num squashFactor = sideBranchLeafBottomFlatness;
                        if (cy > 0) squashFactor = sideBranchLeafTopFlatness;
                        num distanceSquared = pow(cx, 2) + pow(cy * squashFactor, 2) + pow(cz, 2);
                        if (distanceSquared < radiusSquared && randomInt(randPrecision) / randPrecision < sideBranchLeafDensity) {
                            structure(lox + cx, loy + cy, loz + cz, sideBranchLeafStructure, "NONE", "CW_90", "CCW_90", "CW_180");
                        }
                    }
                }
            }
        }
    }
    block(0, i, 0, trunkBlock);
    block(1, i, 0, trunkBlock);
    block(0, i, 1, trunkBlock);
    block(1, i, 1, trunkBlock);
}

for (num b = 1; b <= topBranches; b = b + 1) {
    num t = 1;
    num ti = 1;
    // Branch direction vector
    num dx = sin(branchAngle) * t;
    num dy = topBranchVerticalDirection;
    num dz = cos(branchAngle) * t;
    // Normalize vector
    num mag = sqrt(pow(dx, 2) + pow(dy, 2) + pow(dz, 2));
    dx = dx / mag;
    dy = dy / mag;
    dz = dz / mag;
    // Branch origin
    num ox = 0;
    num oy = trunkHeight;
    num oz = 0;
    // Set branch block based on largest unsigned vector component
    str branchBlock = topBranchBlockY;
    if (abs(dx) > max(abs(dy), abs(dz))) branchBlock = topBranchBlockX;
    else if (abs(dz) > max(abs(dy), abs(dx))) branchBlock = topBranchBlockZ;
    num branchLength = topBranchLengthUpwardsMin * ti + topBranchLengthOutwardsMin * t;
    // Generate branch
    num r = topBranchRadius;
    for (num l = 0; l <= branchLength; l = l + 1) {
        for (num x = -r; x <= r; x = x + 1) {
            for (num y = -r; y <= r; y = y + 1) {
                for (num z = -r; z <= r; z = z + 1) {
                    if (pow(x, 2) + pow(y, 2) + pow(z, 2) < pow(r, 2)) {
                        block((l * dx + ox) + x, (l * dy + oy) + y, (l * dz + oz) + z, branchBlock);
                    }
                }
            }
        }
    }
    // Rotate angle of next branch
    branchAngle = branchAngle + goldenAngle;
    // Generate leaf cluster at the end of the branch
    num radius = topBranchLeafRadiusMin;
    num radiusSquared = pow(radius, 2);
    // Leaf cluster origin (end of branch)
    num lox = ox + branchLength * dx;
    num loy = oy + branchLength * dy + topBranchLeafTranslate;
    num loz = oz + branchLength * dz;
    for (num cx = ceil(-radius); cx <= ceil(radius); cx = cx + 1) {
        for (num cy = ceil(-radius / topBranchLeafBottomFlatness); cy <= ceil(radius / topBranchLeafTopFlatness); cy = cy + 1) {
            for (num cz = ceil(-radius); cz <= ceil(radius); cz = cz + 1) {
                num squashFactor = topBranchLeafBottomFlatness;
                if (cy > 0) squashFactor = topBranchLeafTopFlatness;
                num distanceSquared = pow(cx, 2) + pow(cy * squashFactor, 2) + pow(cz, 2);
                if (distanceSquared < radiusSquared && randomInt(randPrecision) / randPrecision < topBranchLeafDensity) {
                    structure(lox + cx, loy + cy, loz + cz, topBranchLeafStructure, "NONE", "CW_90", "CCW_90", "CW_180");
                }
            }
        }
    }

    // Generates end branches
    num endBranchAngle = randomInt(randPrecision) / randPrecision * 2 * pi;
    for (num eb = 1; eb <= endBranches; eb = eb + 1) {
        num et = eb / endBranches;
        num eti = 1 - et;
        // Branch direction vector
        num edx = sin(endBranchAngle) * et;
        num edy = endBranchVerticalDirection;
        num edz = cos(endBranchAngle) * et;
        // Normalize vector
        num emag = sqrt(pow(edx, 2) + pow(edy, 2) + pow(edz, 2));
        edx = edx / emag;
        edy = edy / emag;
        edz = edz / emag;
        // Branch origin
        num eox = branchLength * dx + ox;
        num eoy = branchLength * dy + oy;
        num eoz = branchLength * dz + oz;
        // Set branch block based on largest unsigned vector component
        branchBlock = endBranchBlockY;
        if (abs(edx) > max(abs(edy), abs(edz))) branchBlock = endBranchBlockX;
        else if (abs(edz) > max(abs(edy), abs(edx))) branchBlock = endBranchBlockZ;
        num endBranchLength = endBranchLengthUpwardsMin * eti + endBranchLengthOutwardsMin * et;
        // Generate branch
        for (num l = 0; l <= endBranchLength; l = l + 1) {
            block(l * edx + eox, l * edy + eoy, l * edz + eoz, branchBlock);
        }
        // Rotate angle of next branch
        endBranchAngle = endBranchAngle + goldenAngle;
        // Generate leaf cluster at the end of the branch
        radius = endBranchLeafRadiusMin;
        radiusSquared = pow(radius, 2);
        // Leaf cluster origin (end of branch)
        num leox = eox + endBranchLength * edx;
        num leoy = eoy + endBranchLength * edy + endBranchLeafTranslate;
        num leoz = eoz + endBranchLength * edz;
        for (num cx = ceil(-radius); cx <= ceil(radius); cx = cx + 1) {
            for (num cy = ceil(-radius / endBranchLeafBottomFlatness); cy <= ceil(radius / endBranchLeafTopFlatness); cy = cy + 1) {
                for (num cz = ceil(-radius); cz <= ceil(radius); cz = cz + 1) {
                    num squashFactor = endBranchLeafBottomFlatness;
                    if (cy > 0) squashFactor = endBranchLeafTopFlatness;
                    num distanceSquared = pow(cx, 2) + pow(cy * squashFactor, 2) + pow(cz, 2);
                    if (distanceSquared < radiusSquared && randomInt(randPrecision) / randPrecision < endBranchLeafDensity) {
                        structure(leox + cx, leoy + cy, leoz + cz, endBranchLeafStructure, "NONE", "CW_90", "CCW_90", "CW_180");
                    }
                }
            }
        }

        // generates leaf branches
        num leafBranchAngle = randomInt(randPrecision) / randPrecision * 2 * pi;
        for (num fb = 1; fb <= leafBranches; fb = fb + 1) {
            num ft = 1;
            num fti = 1;
            // Branch direction vector
            num fdx = sin(leafBranchAngle) * ft;
            num fdy = leafBranchVerticalDirection;
            num fdz = cos(leafBranchAngle) * ft;
            // Normalize vector
            num fmag = sqrt(pow(fdx, 2) + pow(fdy, 2) + pow(fdz, 2));
            fdx = fdx / fmag;
            fdy = fdy / fmag;
            fdz = fdz / fmag;
            // Branch origin
            num fox = endBranchLength * edx + eox;
            num foy = endBranchLength * edy + eoy;
            num foz = endBranchLength * edz + eoz;
            // Set branch block based on largest unsigned vector component
            branchBlock = leafBranchBlockY;
            if (abs(fdx) > max(abs(fdy), abs(fdz))) branchBlock = leafBranchBlockX;
            else if (abs(fdz) > max(abs(fdy), abs(fdx))) branchBlock = leafBranchBlockZ;
            num leafBranchLength = leafBranchLengthUpwardsMin * fti + leafBranchLengthOutwardsMin * ft;
            // Generate branch
            for (num l = 0; l <= leafBranchLength; l = l + 1) {
                if (pow(l * fdx + fox, 2) + pow((l * fdy + foy) - trunkHeight, 2) + pow(l * fdz + foz, 2) > pow(maxBranchReachRadius, 2)) {
                    block(l * fdx + fox, l * fdy + foy - 1, l * fdz + foz, topBranchBlockY);
                    leafBranchLength = l;
                    break;
                }
                block(l * fdx + fox, l * fdy + foy, l * fdz + foz, branchBlock);
            }
            // Rotate angle of next branch
            leafBranchAngle = leafBranchAngle + goldenAngle;
            // Generate leaf cluster at the end of the branch
            radius = leafBranchLeafRadiusMin;
            radiusSquared = pow(radius, 2);
            // Leaf cluster origin (end of branch)
            num lfox = fox + leafBranchLength * fdx;
            num lfoy = foy + leafBranchLength * fdy + leafBranchLeafTranslate;
            num lfoz = foz + leafBranchLength * fdz;
            for (num cx = ceil(-radius); cx <= ceil(radius); cx = cx + 1) {
                for (num cy = ceil(-radius / leafBranchLeafBottomFlatness); cy <= ceil(radius / leafBranchLeafTopFlatness); cy = cy + 1) {
                    for (num cz = ceil(-radius); cz <= ceil(radius); cz = cz + 1) {
                        num squashFactor = leafBranchLeafBottomFlatness;
                        if (cy > 0) squashFactor = leafBranchLeafTopFlatness;
                        num distanceSquared = pow(cx, 2) + pow(cy * squashFactor, 2) + pow(cz, 2);
                        if (distanceSquared < radiusSquared && randomInt(randPrecision) / randPrecision < leafBranchLeafDensity) {
                            structure(lfox + cx, lfoy + cy, lfoz + cz, leafBranchLeafStructure, "NONE", "CW_90", "CCW_90", "CW_180");
                        }
                    }
                }
            }
        }
    }
}


for (num y = maxBranchReachRadius; y < maxBranchReachRadius + 15; y = y + 1) {
    for (num x = -maxBranchReachRadius; x < maxBranchReachRadius; x = x + 1) {
        for (num z = -maxBranchReachRadius; z < maxBranchReachRadius; z = z + 1) {
            if (getBlock(x, y - 1, z) == "minecraft:oak_leaves" &&
                getBlock(x, y, z) == "minecraft:air" && randomInt(3) == 0) block(x, y, z, "minecraft:short_grass");
        }
    }
}
