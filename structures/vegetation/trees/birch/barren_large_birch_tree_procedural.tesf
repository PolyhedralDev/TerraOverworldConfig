num randPrecision = 100;
num goldenAngle = 2.39996;
num pi = 3.14159;

num trunkHeight = 9+randomInt(20);
str trunkBlock = "minecraft:birch_log";


num sideMushroomInterval = 2+randomInt(4);
num sideMushroomMinHeight = 100;

num sideBranchInterval = 3+randomInt(2);
num sideBranchMinHeight = 3+randomInt(3);
num sideBranchLengthMin = 3+randomInt(2);
num sideBranchLengthVariation = 2;
num sideBranchVerticalVariation = 0;
num sideBranchVerticalDirection = 1.3+randomInt(randPrecision)/randPrecision/2;
num sideBranchLeafRadiusMin = 2;
num sideBranchLeafTranslate = -2;
num sideBranchLeafTopFlatness = 0.3;
num sideBranchLeafBottomFlatness = 2;
num sideBranchLeafDensity = 0.75;
str sideBranchLeafBlock = "minecraft:birch_leaves[distance=1,persistent=false]";
str sideBranchBlockX = "minecraft:birch_wood[axis=x]";
str sideBranchBlockY = "minecraft:birch_wood[axis=y]";
str sideBranchBlockZ = "minecraft:birch_wood[axis=z]";

num topBranches = 2+randomInt(2);
num topBranchLengthUpwardsMin = 6+randomInt(2);
num topBranchLengthOutwardsMin = 2+randomInt(2);
num topBranchVerticalDirection = 1;
num topBranchLeafRadiusMin = 2;
num topBranchLeafTranslate = -2;
num topBranchLeafTopFlatness = 0.3;
num topBranchLeafBottomFlatness = 2;
num topBranchLeafDensity = 0.75;
str topBranchLeafBlock = "minecraft:birch_leaves[distance=1,persistent=false]";
str topBranchBlockX = "minecraft:birch_wood[axis=x]";
str topBranchBlockY = "minecraft:birch_wood[axis=y]";
str topBranchBlockZ = "minecraft:birch_wood[axis=z]";

num branchAngle = randomInt(randPrecision)/randPrecision*2*pi;
for (num i = 0; i < trunkHeight; i = i + 1) {
    if (i > sideMushroomMinHeight && i % sideMushroomInterval == 0) {
        structure(0, i, 0, "tree_trunk_mushroom_disk", "NONE", "CW_90", "CCW_90", "CW_180");
    }
    if (i > sideBranchMinHeight) {
        if (i % sideBranchInterval == 0) {
            // Branch direction vector
            num dx = sin(branchAngle);
            num dy = sideBranchVerticalDirection + randomInt(randPrecision)/randPrecision*sideBranchVerticalVariation;
            num dz = cos(branchAngle);
            // Normalize vector
            num mag = sqrt(pow(dx,2)+pow(dy,2)+pow(dz,2));
            dx = dx/mag;
            dy = dy/mag;
            dz = dz/mag;
            // Branch origin
            num ox = 0;
            num oy = i;
            num oz = 0;
            // Set branch block based on largest unsigned vector component
            str branchBlock = sideBranchBlockY;
            if (abs(dx) > max(abs(dy),abs(dz))) branchBlock = sideBranchBlockX;
            else if (abs(dz) > max(abs(dy),abs(dx))) branchBlock = sideBranchBlockZ;
            num branchLength = sideBranchLengthMin + randomInt(randPrecision)/randPrecision*sideBranchLengthVariation;
            // Generate branch
            for (num l = 0; l <= branchLength; l = l + 1) {
                block(l*dx+ox, l*dy+oy, l*dz+oz, branchBlock);
            }
            // Rotate angle of next branch
            branchAngle = branchAngle + goldenAngle;
        }
    }
    block(0, i, 0, trunkBlock);
}

for (num b = 1; b <= topBranches; b = b + 1) {
    num t = b/topBranches;
    num ti = 1-t;
    // Branch direction vector
    num dx = sin(branchAngle) * t;
    num dy = topBranchVerticalDirection;
    num dz = cos(branchAngle) * t;
    // Normalize vector
    num mag = sqrt(pow(dx,2)+pow(dy,2)+pow(dz,2));
    dx = dx/mag;
    dy = dy/mag;
    dz = dz/mag;
    // Branch origin
    num ox = 0;
    num oy = trunkHeight-2;
    num oz = 0;
    // Set branch block based on largest unsigned vector component
    str branchBlock = topBranchBlockY;
    if (abs(dx) > max(abs(dy),abs(dz))) branchBlock = topBranchBlockX;
    else if (abs(dz) > max(abs(dy),abs(dx))) branchBlock = topBranchBlockZ;
    num branchLength = topBranchLengthUpwardsMin*ti + topBranchLengthOutwardsMin*t;
    // Generate branch
    for (num l = 0; l <= branchLength; l = l + 1) {
        block(l*dx+ox, l*dy+oy, l*dz+oz, branchBlock);
    }
    // Rotate angle of next branch
    branchAngle = branchAngle + goldenAngle;
}

block(0, -1, 0, "minecraft:dirt");