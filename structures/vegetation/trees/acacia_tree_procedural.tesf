num randPrecision = 100;

// Blocks to be used in the tree
str trunkBlock = "minecraft:acacia_log";
str topBranchBlock = "minecraft:acacia_log";
str leafBlock = "minecraft:acacia_leaves[distance=1,persistent=false]";

num trunkHeight = randomInt(6) + 1; // Length of main trunk

// 'Top branch' = branches that stem from the top of the main trunk
num topBranchCount = randomInt(2) + 2; // How many top branches will generate
num topBranchLengthMin = 6; // Minimum length of each branch
num topBranchLengthVariation = 3; // Random branch length variation in blocks from 0 - n
num topBranchVerticalDirection = 0.7; // Roughly how much any given branch will point upwards
num topBranchVerticalVariation = 1; // Adds random number from 0 - n to above variable
num topBranchLeafRadiusMin = 3; // Minimum radius in blocks that leaf clusters generate
num topBranchLeafRadiusVariation = 3; // How much the radius can vary on top of the min
num leafClusterFlatness = 3; // Higher = flatter leaf clusters
num leafClusterLeafRarity = 2; // Density of leaves, higher = less leaves

// Generate main trunk
for (num i = 0; i <= trunkHeight; i = i + 1) {
    block(0, i, 0, trunkBlock);
}

// Generate top branches
for (num i = 0; i <= topBranchCount; i = i + 1) {
    // Pick random branch length
    num branchLength = topBranchLengthMin+randomInt(topBranchLengthVariation);
    // Pick random vector to determine the branch direction
    num dx = (randomInt(randPrecision)/randPrecision-0.5)*1.5;
    num dy = topBranchVerticalDirection+randomInt(randPrecision)/randPrecision*topBranchVerticalVariation;
    num dz = (randomInt(randPrecision)/randPrecision-0.5)*1.5;
    // Normalize direction vector
    num mag = sqrt(pow(dx,2)+pow(dy,2)+pow(dz,2));
    dx = dx/mag;
    dy = dy/mag;
    dz = dz/mag;
    // Generate branch
    for (num l = 0; l <= branchLength; l = l + 1) {
        block(dx*l, trunkHeight+dy*l, dz*l, topBranchBlock);
    }
    // Generate leaf cluster at the end of the branch
    num radius = topBranchLeafRadiusMin+randomInt(randPrecision)/randPrecision*topBranchLeafRadiusVariation;
    num radiusCeil = ceil(radius);
    num radiusSquared = pow(radius, 2);
    for(num x = -radiusCeil; x <= radiusCeil; x = x + 1) {
        for(num y = 0; y <= radiusCeil; y = y + 1) {
            for(num z = -radiusCeil; z <= radiusCeil; z = z + 1) {
                num dist = (pow(x,2) + pow(y*leafClusterFlatness,2) + pow(z,2));
                if (dist < radiusSquared && randomInt(leafClusterLeafRarity) == 0) {
                    block(x+dx*branchLength, trunkHeight+y+dy*branchLength, z+dz*branchLength, leafBlock, false);
                }
            }
        }
    }
}