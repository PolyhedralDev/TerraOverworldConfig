num randPrecision = 100;
num goldenAngle = 2.39996;
num pi = 3.14159;
num twopi = 6.28318530718;

num trunkHeight = 4+randomInt(10);
str trunkBlock = "minecraft:pale_oak_log";
str rootBlockX = "minecraft:pale_oak_wood[axis=x]";
str rootBlockZ = "minecraft:pale_oak_wood[axis=z]";
str isReplaceable = "is_pale_oak_replaceable";

num sideBranchInterval = 3+randomInt(2);
num sideBranchMinHeight = 1+randomInt(3);
num sideBranchLengthMin = 2+randomInt(2);
num sideBranchLengthVariation = 2;
num sideBranchVerticalVariation = 0;
num sideBranchVerticalDirection = 1+randomInt(randPrecision)/randPrecision/2;
num sideBranchLeafRadiusMin = 4;
num sideBranchLeafTranslate = 0;
num sideBranchLeafTopFlatness = 1;
num sideBranchLeafBottomFlatness = 3;
num sideBranchLeafDensity = 0.4;
str sideBranchLeafStructure = "pale_oak_leaves_clump";
str sideBranchBlockX = "minecraft:pale_oak_log[axis=x]";
str sideBranchBlockY = "minecraft:pale_oak_log[axis=y]";
str sideBranchBlockZ = "minecraft:pale_oak_log[axis=z]";

num topBranches = 4+randomInt(5);
num topBranchLengthUpwardsMin = 10+randomInt(2);
num topBranchLengthOutwardsMin = 4+randomInt(6);
num topBranchVerticalDirection = 1;
num topBranchLeafRadiusMin = 5;
num topBranchLeafTranslate = 0;
num topBranchLeafTopFlatness = 1;
num topBranchLeafBottomFlatness = 3;
num topBranchLeafDensity = 0.4;
str topBranchLeafStructure = "pale_oak_leaves_clump";
str topBranchBlockX = "minecraft:pale_oak_log[axis=x]";
str topBranchBlockY = "minecraft:pale_oak_log[axis=y]";
str topBranchBlockZ = "minecraft:pale_oak_log[axis=z]";

num creakingHeartHeight = 1+randomInt(4);

// Generate main trunk (including side branches)
num branchAngle = randomInt(randPrecision)/randPrecision*2*pi;
for (num i = 0; i < trunkHeight; i = i + 1) {
    if (!structure(0, i, 0, isReplaceable, "NONE")) {
        return;
    }

    if (i > sideBranchMinHeight && i % sideBranchInterval == 0) { // Determine if a side branch should generate on this layer
        // Branch direction vector
        num dx = sin(branchAngle);
        num dy = sideBranchVerticalDirection + randomInt(randPrecision)/randPrecision*sideBranchVerticalVariation;
        num dz = cos(branchAngle);
        // Normalize vector
        num mag = sqrt(pow(dx,2)+pow(dy,2)+pow(dz,2));
        dx = dx/mag;
        dy = dy/mag;
        dz = dz/mag;
        // Branch origin
        num ox = 0;
        num oy = i;
        num oz = 0;
        // Set branch block based on largest unsigned vector component
        str branchBlock = sideBranchBlockY;
        if (abs(dx) > max(abs(dy),abs(dz))) branchBlock = sideBranchBlockX;
        else if (abs(dz) > max(abs(dy),abs(dx))) branchBlock = sideBranchBlockZ;
        num branchLength = sideBranchLengthMin + randomInt(randPrecision)/randPrecision*sideBranchLengthVariation;
        // Generate branch
        num bx = ox;
        num by = oy;
        num bz = by;
        bool branchCollided = false;
        for (num l = 0; l <= branchLength; l = l + 1) {
            bx = l*dx+ox;
            by = l*dy+oy;
            bz = l*dz+oz;
            // Determine if branch has collided with a block
            if (!structure(bx, by, bz, isReplaceable, "NONE")) {
                branchCollided = true;
                break;
            }
            block(bx, by, bz, branchBlock);
        }
        // Rotate angle of next branch
        branchAngle = branchAngle + goldenAngle;
        // Generate leaf cluster at the end of the branch
        if (!branchCollided) {
            num radius = sideBranchLeafRadiusMin;

            // Leaf cluster origin (end of branch)
            num lox = ox+branchLength*dx;
            num loy = oy+branchLength*dy + sideBranchLeafTranslate;
            num loz = oz+branchLength*dz;

            // Adjust radius to prevent clipping outside the collision mask
            num scanRadius = radius;
            num scanRadiusSquared = pow(scanRadius, 2);
            for (num cx = ceil(-scanRadius); cx <= ceil(scanRadius); cx = cx + 1) {
                 for (num cy = ceil(-scanRadius/sideBranchLeafBottomFlatness); cy <= ceil(scanRadius/sideBranchLeafTopFlatness); cy = cy + 1) {
                     for (num cz = ceil(-scanRadius); cz <= ceil(scanRadius); cz = cz + 1) {
                         num squashFactor = sideBranchLeafBottomFlatness;
                         if (cy > 0) squashFactor = sideBranchLeafTopFlatness;
                         num distanceSquared = pow(cx,2)+pow(cy*squashFactor,2)+pow(cz,2);
                         if (distanceSquared<scanRadiusSquared) {
                            if (!structure(lox+cx, loy+cy, loz+cz, isReplaceable, "NONE")) {
                                radius = min(radius, sqrt(distanceSquared));
                            }
                         }
                     }
                 }
            }

            // Place leaf cluster
            num radiusSquared = pow(radius, 2);
            for (num cx = ceil(-radius); cx <= ceil(radius); cx = cx + 1) {
                for (num cy = ceil(-radius/sideBranchLeafBottomFlatness); cy <= ceil(radius/sideBranchLeafTopFlatness); cy = cy + 1) {
                    for (num cz = ceil(-radius); cz <= ceil(radius); cz = cz + 1) {
                        num squashFactor = sideBranchLeafBottomFlatness;
                        if (cy > 0) squashFactor = sideBranchLeafTopFlatness;
                        num distanceSquared = pow(cx,2)+pow(cy*squashFactor,2)+pow(cz,2);
                        if (distanceSquared < radiusSquared && randomInt(randPrecision)/randPrecision < sideBranchLeafDensity) {
                            structure(lox+cx, loy+cy, loz+cz, sideBranchLeafStructure, "NONE", "CW_90", "CCW_90", "CW_180");
                        }
                    }
                }
            }
        }
    }
    block(0, i, 0, trunkBlock);
    block(1, i, 0, trunkBlock);
    block(0, i, 1, trunkBlock);
    block(1, i, 1, trunkBlock);
}

// Generate roots at base of trunk
num roots = 3;
num rootMaxDepth = 3;
num rootHeight = 2;
num rootLength = 4;
num rootAngle = randomInt(randPrecision)/randPrecision*2*pi;
for (num r = 0; r < roots; r = r + 1) {
    num dx = sin(rootAngle);
    num dz = cos(rootAngle);
    str rootBlock = rootBlockX;
    if (abs(dz) > abs(dx)) rootBlock = rootBlockZ;
    for (num l = 0; l <= rootLength; l = l + 1) {
        num height = rootHeight * (1-(l/rootLength));
        bool bottomedOut = false;
        for (num h = height; h >= -rootMaxDepth; h = h - 1) {
            if (check(round(l*dx),round(h),round(l*dz)) != "AIR") {
                bottomedOut = true;
                break;
            }
            block(l*dx, h, l*dz, rootBlock);
        }
        if (!bottomedOut) break;
    }
    rootAngle = rootAngle + goldenAngle;
}

for (num b = 1; b <= topBranches; b = b + 1) {
    num t = b/topBranches;
    num ti = 1-t;
    // Branch direction vector
    num dx = sin(branchAngle) * t;
    num dy = topBranchVerticalDirection;
    num dz = cos(branchAngle) * t;
    // Normalize vector
    num mag = sqrt(pow(dx,2)+pow(dy,2)+pow(dz,2));
    dx = dx/mag;
    dy = dy/mag;
    dz = dz/mag;
    // Branch origin
    num ox = 0;
    num oy = trunkHeight;
    num oz = 0;
    // Set branch block based on largest unsigned vector component
    str branchBlock = topBranchBlockY;
    if (abs(dx) > max(abs(dy),abs(dz))) branchBlock = topBranchBlockX;
    else if (abs(dz) > max(abs(dy),abs(dx))) branchBlock = topBranchBlockZ;
    num branchLength = topBranchLengthUpwardsMin*ti + topBranchLengthOutwardsMin*t;
    // Generate branch
    num bx = ox;
    num by = oy;
    num bz = by;
    bool branchCollided = false;
    for (num l = 0; l <= branchLength; l = l + 1) {
        bx = l*dx+ox;
        by = l*dy+oy;
        bz = l*dz+oz;
        // Determine if branch has collided with a block
        if (!structure(bx, by, bz, isReplaceable, "NONE")) {
            branchCollided = true;
            break;
        }
        block(bx, by, bz, branchBlock);
    }
    // Rotate angle of next branch
    branchAngle = branchAngle + goldenAngle;
    // Generate leaf cluster at the end of the branch
    if (!branchCollided) {
        num radius = topBranchLeafRadiusMin;

        // Leaf cluster origin (end of branch)
        num lox = ox+branchLength*dx;
        num loy = oy+branchLength*dy + topBranchLeafTranslate;
        num loz = oz+branchLength*dz;

        // Adjust radius to prevent clipping outside the collision mask
        num scanRadius = radius;
        num scanRadiusSquared = pow(scanRadius, 2);
        for (num cx = ceil(-scanRadius); cx <= ceil(scanRadius); cx = cx + 1) {
             for (num cy = ceil(-scanRadius/topBranchLeafBottomFlatness); cy <= ceil(scanRadius/topBranchLeafTopFlatness); cy = cy + 1) {
                 for (num cz = ceil(-scanRadius); cz <= ceil(scanRadius); cz = cz + 1) {
                     num squashFactor = topBranchLeafBottomFlatness;
                     if (cy > 0) squashFactor = topBranchLeafTopFlatness;
                     num distanceSquared = pow(cx,2)+pow(cy*squashFactor,2)+pow(cz,2);
                     if (distanceSquared<scanRadiusSquared) {
                        if (!structure(lox+cx, loy+cy, loz+cz, isReplaceable, "NONE")) {
                            radius = min(radius, sqrt(distanceSquared));
                        }
                     }
                 }
             }
        }
        
        // Place leaf cluster
        num radiusSquared = pow(radius, 2);
        for (num cx = ceil(-radius); cx <= ceil(radius); cx = cx + 1) {
            for (num cy = ceil(-radius/topBranchLeafBottomFlatness); cy <= ceil(radius/topBranchLeafTopFlatness); cy = cy + 1) {
                for (num cz = ceil(-radius); cz <= ceil(radius); cz = cz + 1) {
                    num squashFactor = topBranchLeafBottomFlatness;
                    if (cy > 0) squashFactor = topBranchLeafTopFlatness;
                    num distanceSquared = pow(cx,2)+pow(cy*squashFactor,2)+pow(cz,2);
                    if (distanceSquared < radiusSquared && randomInt(randPrecision)/randPrecision < topBranchLeafDensity) {
                        structure(lox+cx, loy+cy, loz+cz, topBranchLeafStructure, "NONE", "CW_90", "CCW_90", "CW_180");
                    }
                }
            }
        }
    }
}

// Generate creaking heart along lower trunk
num creakingHeartRoll = randomInt(10);
if (creakingHeartRoll == 0) structure(0, creakingHeartHeight, 0, "creaking_heart", "NONE");

for (num v = 25; v > (trunkHeight-10); v = v - 0.25) {
    num rx = sin(randomInt(100)/100 * twopi) * (randomInt(5) + 2);
    num rz = cos(randomInt(100)/100 * twopi) * (randomInt(5) + 2);
    structure(rx, v, rz, "pale_hanging_moss", "NONE");
    structure(-rx, v, rz, "pale_hanging_moss", "NONE");
    structure(rx, v, -rz, "pale_hanging_moss", "NONE");
    structure(-rx, v, -rz, "pale_hanging_moss", "NONE");
}

block(0, -1, 0, "minecraft:dirt");