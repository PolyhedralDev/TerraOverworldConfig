num randPrecision = 100;

num length = 10 + randomInt(randPrecision)/randPrecision*40;
num radius = 1.5 + randomInt(randPrecision)/randPrecision*3;
// Direction vector
num dx = (randomInt(randPrecision)/randPrecision-0.5)*1.5;
num dy = 0.5 + randomInt(randPrecision)/randPrecision;
num dz = (randomInt(randPrecision)/randPrecision-0.5)*1.5;


// Normalize vector
num mag = sqrt(pow(dx,2)+pow(dy,2)+pow(dz,2));
dx = dx/mag;
dy = dy/mag;
dz = dz/mag;

for(num l = 0; l <= length; l = l + 1) {

    // Reduce radius inversely to length
    num r = (radius/length * -l) + radius;

    // Generate sphere at each point
    for(num x = -r; x <= r; x = x + 1) {
        for(num y = -r; y <= r; y = y + 1) {
            for(num z = -r; z <= r; z = z + 1) {
                if (pow(x,2)+pow(y,2)+pow(z,2) < pow(r,2)) {
                    if (l/length < 0.1) {
                        block(l*dx + x, l*dy + y - radius, l*dz + z, "minecraft:blue_ice", false);
                    }
                    else if (l/length < 0.5) {
                        block(l*dx + x, l*dy + y - radius, l*dz + z, "minecraft:packed_ice", false);
                    }
                    else {
                        block(l*dx + x, l*dy + y - radius, l*dz + z, "minecraft:ice", false);
                    }
                }
            }
        }
    }
}