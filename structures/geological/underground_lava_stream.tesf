num randPrecision = 100;

num radius = 4.5 + randomInt(randPrecision) / randPrecision;
num warp = 3;
num warpFreq = 4;
num squish = 1 + randomInt(randPrecision) / randPrecision;
num radiusSquared = pow(radius, 2);
num yTranslate = 0;

num length = 10 + randomInt(12);

// Direction vector
num dx = (randomInt(randPrecision) / randPrecision - 0.5) * 1.5;
num dz = (randomInt(randPrecision) / randPrecision - 0.5) * 1.5;

num mag = sqrt(pow2(dx) + pow2(dz));
dx = dx / mag;
dz = dz / mag;

if (!structure(radius, -radius / squish, 0, "is_rock", "NONE") ||
    !structure(-radius, -radius / squish, 0, "is_rock", "NONE") ||
    !structure(0, -radius / squish, radius, "is_rock", "NONE") ||
    !structure(0, -radius / squish, -radius, "is_rock", "NONE") ||
    !structure(dx * (length / 2) + radius, -radius / squish, dz * (length / 2), "is_rock", "NONE") ||
    !structure(dx * (length / 2) - radius, -radius / squish, dz * (length / 2), "is_rock", "NONE") ||
    !structure(dx * (length / 2), -radius / squish, dz * (length / 2) + radius, "is_rock", "NONE") ||
    !structure(dx * (length / 2), -radius / squish, dz * (length / 2) - radius, "is_rock", "NONE") ||
    !structure(dx * (-length / 2) + radius, -radius / squish, (dz * (-length / 2)), "is_rock", "NONE") ||
    !structure(dx * (-length / 2) - radius, -radius / squish, (dz * (-length / 2)), "is_rock", "NONE") ||
    !structure(dx * (-length / 2), -radius / squish, (dz * (-length / 2) + radius), "is_rock", "NONE") ||
    !structure(dx * (-length / 2), -radius / squish, (dz * (-length / 2) - radius), "is_rock", "NONE")
) fail;

for(num  l = -length/2; l < length/2; l = l + 1) {
    num xOffset = dx * l;
    num zOffset = dz * l;

    for (num x = -radius - warp; x < radius + warp; x = x + 1) {
        for (num y = (-radius - warp) / squish; y < (radius + warp) / squish; y = y + 1) {
            for (num z = -radius - warp; z < radius + warp; z = z + 1) {
                num warpX = warp * sampler("simplex3",
                    warpFreq * (x + originX()),
                    warpFreq * (y + originY() + 1000),
                    warpFreq * (z + originZ()));
                num warpY = warp * sampler("simplex3",
                    warpFreq * (x + originX()),
                    warpFreq * (y + originY() + 2000),
                    warpFreq * (z + originZ()));
                num warpZ = warp * sampler("simplex3",
                    warpFreq * (x + originX()),
                    warpFreq * (y + originY() + 3000),
                    warpFreq * (z + originZ()));
                if (pow(x + warpX, 2) + pow((y + warpY) * squish, 2) + pow(z + warpZ, 2) < radiusSquared && y < 0) {
                    str setBlock = "minecraft:stone";
                    if (originY() < 10) setBlock = "minecraft:deepslate";
                    if (randomInt(4) == 0) setBlock = "minecraft:magma_block";
                    if (getBlock(x + xOffset, y + yTranslate, z + zOffset) != "minecraft:air" &&
                        getBlock(x + xOffset, y + yTranslate, z + zOffset) != "minecraft:lava" &&
                        getBlock(x + xOffset, y + yTranslate, z + zOffset) != "minecraft:magma_block") block(x + xOffset, y + yTranslate, z + zOffset, setBlock, true);
                }

                if (pow(x + warpX, 2) + pow((y + warpY) * squish, 2) + pow(z + warpZ, 2) < (radiusSquared - 15) && y < 0) {
                    block(x + xOffset, y + yTranslate, z + zOffset, "minecraft:lava", true, true);
                }

                if (pow(x + warpX, 2) + pow((y + warpY) * squish, 2) + pow(z + warpZ, 2) < (radiusSquared - 15) && y >= 0) {
                    block(x + xOffset, y + yTranslate, z + zOffset, "minecraft:air", true);
                }
            }
        }
    }
}

